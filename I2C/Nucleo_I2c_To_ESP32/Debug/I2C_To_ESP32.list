
I2C_To_ESP32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000387c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a9c  08003a9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a9c  08003a9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a9c  08003a9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003ab0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003ab0  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adec  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192f  00000000  00000000  0002ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f923  00000000  00000000  0002d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb29  00000000  00000000  0004d283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c026d  00000000  00000000  00058dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119019  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002614  00000000  00000000  0011906c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080039f8 	.word	0x080039f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080039f8 	.word	0x080039f8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b5b0      	push	{r4, r5, r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af02      	add	r7, sp, #8
	 *
	 * NOTE: most values are hard coded for testing purposes. Add your own code to automatically fill
	 * the buffers
	*/

	transmitBuffer[0] = 0x02;
 80001ea:	4bc3      	ldr	r3, [pc, #780]	; (80004f8 <main+0x314>)
 80001ec:	2202      	movs	r2, #2
 80001ee:	701a      	strb	r2, [r3, #0]
	transmitBuffer[1] = sizeof(transmitBuffer) / sizeof(transmitBuffer[0]);
 80001f0:	4bc1      	ldr	r3, [pc, #772]	; (80004f8 <main+0x314>)
 80001f2:	220f      	movs	r2, #15
 80001f4:	705a      	strb	r2, [r3, #1]
	transmitBuffer[2] = 'F';
 80001f6:	4bc0      	ldr	r3, [pc, #768]	; (80004f8 <main+0x314>)
 80001f8:	2246      	movs	r2, #70	; 0x46
 80001fa:	709a      	strb	r2, [r3, #2]
	transmitBuffer[3] = 'r';
 80001fc:	4bbe      	ldr	r3, [pc, #760]	; (80004f8 <main+0x314>)
 80001fe:	2272      	movs	r2, #114	; 0x72
 8000200:	70da      	strb	r2, [r3, #3]
	transmitBuffer[4] = 'o';
 8000202:	4bbd      	ldr	r3, [pc, #756]	; (80004f8 <main+0x314>)
 8000204:	226f      	movs	r2, #111	; 0x6f
 8000206:	711a      	strb	r2, [r3, #4]
	transmitBuffer[5] = 'm';
 8000208:	4bbb      	ldr	r3, [pc, #748]	; (80004f8 <main+0x314>)
 800020a:	226d      	movs	r2, #109	; 0x6d
 800020c:	715a      	strb	r2, [r3, #5]
	transmitBuffer[6] = ' ';
 800020e:	4bba      	ldr	r3, [pc, #744]	; (80004f8 <main+0x314>)
 8000210:	2220      	movs	r2, #32
 8000212:	719a      	strb	r2, [r3, #6]
	transmitBuffer[7] = 'N';
 8000214:	4bb8      	ldr	r3, [pc, #736]	; (80004f8 <main+0x314>)
 8000216:	224e      	movs	r2, #78	; 0x4e
 8000218:	71da      	strb	r2, [r3, #7]
	transmitBuffer[8] = 'u';
 800021a:	4bb7      	ldr	r3, [pc, #732]	; (80004f8 <main+0x314>)
 800021c:	2275      	movs	r2, #117	; 0x75
 800021e:	721a      	strb	r2, [r3, #8]
	transmitBuffer[9] = 'c';
 8000220:	4bb5      	ldr	r3, [pc, #724]	; (80004f8 <main+0x314>)
 8000222:	2263      	movs	r2, #99	; 0x63
 8000224:	725a      	strb	r2, [r3, #9]
	transmitBuffer[10] = 'l';
 8000226:	4bb4      	ldr	r3, [pc, #720]	; (80004f8 <main+0x314>)
 8000228:	226c      	movs	r2, #108	; 0x6c
 800022a:	729a      	strb	r2, [r3, #10]
	transmitBuffer[11] = 'e';
 800022c:	4bb2      	ldr	r3, [pc, #712]	; (80004f8 <main+0x314>)
 800022e:	2265      	movs	r2, #101	; 0x65
 8000230:	72da      	strb	r2, [r3, #11]
	transmitBuffer[12] = 'o';
 8000232:	4bb1      	ldr	r3, [pc, #708]	; (80004f8 <main+0x314>)
 8000234:	226f      	movs	r2, #111	; 0x6f
 8000236:	731a      	strb	r2, [r3, #12]
	transmitBuffer[13] = crc_calc(transmitBuffer + 2, 11);
 8000238:	4bb0      	ldr	r3, [pc, #704]	; (80004fc <main+0x318>)
 800023a:	210b      	movs	r1, #11
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fac9 	bl	80007d4 <crc_calc>
 8000242:	4603      	mov	r3, r0
 8000244:	461a      	mov	r2, r3
 8000246:	4bac      	ldr	r3, [pc, #688]	; (80004f8 <main+0x314>)
 8000248:	735a      	strb	r2, [r3, #13]
	transmitBuffer[14] = 0x04;
 800024a:	4bab      	ldr	r3, [pc, #684]	; (80004f8 <main+0x314>)
 800024c:	2204      	movs	r2, #4
 800024e:	739a      	strb	r2, [r3, #14]

	emptyPacket[0] = 0x02;
 8000250:	4bab      	ldr	r3, [pc, #684]	; (8000500 <main+0x31c>)
 8000252:	2202      	movs	r2, #2
 8000254:	701a      	strb	r2, [r3, #0]
	emptyPacket[1] = 4;
 8000256:	4baa      	ldr	r3, [pc, #680]	; (8000500 <main+0x31c>)
 8000258:	2204      	movs	r2, #4
 800025a:	705a      	strb	r2, [r3, #1]
	emptyPacket[2] = crc_calc(emptyPacket + 2, 1);
 800025c:	4ba9      	ldr	r3, [pc, #676]	; (8000504 <main+0x320>)
 800025e:	2101      	movs	r1, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fab7 	bl	80007d4 <crc_calc>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	4ba5      	ldr	r3, [pc, #660]	; (8000500 <main+0x31c>)
 800026c:	709a      	strb	r2, [r3, #2]
	emptyPacket[3] = 0x04;
 800026e:	4ba4      	ldr	r3, [pc, #656]	; (8000500 <main+0x31c>)
 8000270:	2204      	movs	r2, #4
 8000272:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fc06 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f974 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 fa42 	bl	8000704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000280:	f000 fa10 	bl	80006a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000284:	f000 f9ce 	bl	8000624 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // First transmit an empty packet and receive data from ESP32
	  seed = 0;
 8000288:	4b9f      	ldr	r3, [pc, #636]	; (8000508 <main+0x324>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ESP_ADDR, emptyPacket, (sizeof(emptyPacket) / sizeof(emptyPacket[0])), HAL_MAX_DELAY); // Transmitting empty packet over I2C
 800028e:	2308      	movs	r3, #8
 8000290:	b299      	uxth	r1, r3
 8000292:	f04f 33ff 	mov.w	r3, #4294967295
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2304      	movs	r3, #4
 800029a:	4a99      	ldr	r2, [pc, #612]	; (8000500 <main+0x31c>)
 800029c:	489b      	ldr	r0, [pc, #620]	; (800050c <main+0x328>)
 800029e:	f000 ff93 	bl	80011c8 <HAL_I2C_Master_Transmit>
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]

	  // Use the return value to decide follow up steps and transmit this value over UART
	  if (ret != HAL_OK)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d01c      	beq.n	80002e6 <main+0x102>
	  {
		  strcpy((char*)statusBuffer, "Error while transmitting\r\n");
 80002ac:	4a98      	ldr	r2, [pc, #608]	; (8000510 <main+0x32c>)
 80002ae:	4b99      	ldr	r3, [pc, #612]	; (8000514 <main+0x330>)
 80002b0:	4615      	mov	r5, r2
 80002b2:	461c      	mov	r4, r3
 80002b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002b6:	6028      	str	r0, [r5, #0]
 80002b8:	6069      	str	r1, [r5, #4]
 80002ba:	60aa      	str	r2, [r5, #8]
 80002bc:	60eb      	str	r3, [r5, #12]
 80002be:	cc03      	ldmia	r4!, {r0, r1}
 80002c0:	6128      	str	r0, [r5, #16]
 80002c2:	6169      	str	r1, [r5, #20]
 80002c4:	8823      	ldrh	r3, [r4, #0]
 80002c6:	78a2      	ldrb	r2, [r4, #2]
 80002c8:	832b      	strh	r3, [r5, #24]
 80002ca:	4613      	mov	r3, r2
 80002cc:	76ab      	strb	r3, [r5, #26]
		  HAL_UART_Transmit(&huart2, statusBuffer, strlen((char*)statusBuffer), HAL_MAX_DELAY);
 80002ce:	4890      	ldr	r0, [pc, #576]	; (8000510 <main+0x32c>)
 80002d0:	f7ff ff80 	bl	80001d4 <strlen>
 80002d4:	4603      	mov	r3, r0
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295
 80002dc:	498c      	ldr	r1, [pc, #560]	; (8000510 <main+0x32c>)
 80002de:	488e      	ldr	r0, [pc, #568]	; (8000518 <main+0x334>)
 80002e0:	f002 ff8c 	bl	80031fc <HAL_UART_Transmit>
 80002e4:	e0b6      	b.n	8000454 <main+0x270>
	  }
	  else
	  {
		  strcpy((char*)statusBuffer, "Successfully transmitted\r\n");
 80002e6:	4a8a      	ldr	r2, [pc, #552]	; (8000510 <main+0x32c>)
 80002e8:	4b8c      	ldr	r3, [pc, #560]	; (800051c <main+0x338>)
 80002ea:	4615      	mov	r5, r2
 80002ec:	461c      	mov	r4, r3
 80002ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f0:	6028      	str	r0, [r5, #0]
 80002f2:	6069      	str	r1, [r5, #4]
 80002f4:	60aa      	str	r2, [r5, #8]
 80002f6:	60eb      	str	r3, [r5, #12]
 80002f8:	cc03      	ldmia	r4!, {r0, r1}
 80002fa:	6128      	str	r0, [r5, #16]
 80002fc:	6169      	str	r1, [r5, #20]
 80002fe:	8823      	ldrh	r3, [r4, #0]
 8000300:	78a2      	ldrb	r2, [r4, #2]
 8000302:	832b      	strh	r3, [r5, #24]
 8000304:	4613      	mov	r3, r2
 8000306:	76ab      	strb	r3, [r5, #26]
		  HAL_UART_Transmit(&huart2, statusBuffer, strlen((char*)statusBuffer), HAL_MAX_DELAY);
 8000308:	4881      	ldr	r0, [pc, #516]	; (8000510 <main+0x32c>)
 800030a:	f7ff ff63 	bl	80001d4 <strlen>
 800030e:	4603      	mov	r3, r0
 8000310:	b29a      	uxth	r2, r3
 8000312:	f04f 33ff 	mov.w	r3, #4294967295
 8000316:	497e      	ldr	r1, [pc, #504]	; (8000510 <main+0x32c>)
 8000318:	487f      	ldr	r0, [pc, #508]	; (8000518 <main+0x334>)
 800031a:	f002 ff6f 	bl	80031fc <HAL_UART_Transmit>

		  ret = HAL_I2C_Master_Receive(&hi2c1, ESP_ADDR, receiveBuffer, (sizeof(receiveBuffer) / sizeof(receiveBuffer[0])), HAL_MAX_DELAY); // Receiving data from ESP32
 800031e:	2308      	movs	r3, #8
 8000320:	b299      	uxth	r1, r3
 8000322:	f04f 33ff 	mov.w	r3, #4294967295
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2311      	movs	r3, #17
 800032a:	4a7d      	ldr	r2, [pc, #500]	; (8000520 <main+0x33c>)
 800032c:	4877      	ldr	r0, [pc, #476]	; (800050c <main+0x328>)
 800032e:	f001 f83f 	bl	80013b0 <HAL_I2C_Master_Receive>
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
		  if (ret != HAL_OK)
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d01c      	beq.n	8000376 <main+0x192>
		  {
			  strcpy((char*)statusBuffer, "Problem during receiving\r\n");
 800033c:	4a74      	ldr	r2, [pc, #464]	; (8000510 <main+0x32c>)
 800033e:	4b79      	ldr	r3, [pc, #484]	; (8000524 <main+0x340>)
 8000340:	4615      	mov	r5, r2
 8000342:	461c      	mov	r4, r3
 8000344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000346:	6028      	str	r0, [r5, #0]
 8000348:	6069      	str	r1, [r5, #4]
 800034a:	60aa      	str	r2, [r5, #8]
 800034c:	60eb      	str	r3, [r5, #12]
 800034e:	cc03      	ldmia	r4!, {r0, r1}
 8000350:	6128      	str	r0, [r5, #16]
 8000352:	6169      	str	r1, [r5, #20]
 8000354:	8823      	ldrh	r3, [r4, #0]
 8000356:	78a2      	ldrb	r2, [r4, #2]
 8000358:	832b      	strh	r3, [r5, #24]
 800035a:	4613      	mov	r3, r2
 800035c:	76ab      	strb	r3, [r5, #26]
			  HAL_UART_Transmit(&huart2, statusBuffer, strlen((char*)statusBuffer), HAL_MAX_DELAY);
 800035e:	486c      	ldr	r0, [pc, #432]	; (8000510 <main+0x32c>)
 8000360:	f7ff ff38 	bl	80001d4 <strlen>
 8000364:	4603      	mov	r3, r0
 8000366:	b29a      	uxth	r2, r3
 8000368:	f04f 33ff 	mov.w	r3, #4294967295
 800036c:	4968      	ldr	r1, [pc, #416]	; (8000510 <main+0x32c>)
 800036e:	486a      	ldr	r0, [pc, #424]	; (8000518 <main+0x334>)
 8000370:	f002 ff44 	bl	80031fc <HAL_UART_Transmit>
 8000374:	e06e      	b.n	8000454 <main+0x270>
		  }
		  else
		  {
			  // Transmit the received data over UART
			  HAL_UART_Transmit(&huart2, &receiveBuffer[2], 1, HAL_MAX_DELAY);
 8000376:	f04f 33ff 	mov.w	r3, #4294967295
 800037a:	2201      	movs	r2, #1
 800037c:	496a      	ldr	r1, [pc, #424]	; (8000528 <main+0x344>)
 800037e:	4866      	ldr	r0, [pc, #408]	; (8000518 <main+0x334>)
 8000380:	f002 ff3c 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[3], 1, HAL_MAX_DELAY);
 8000384:	f04f 33ff 	mov.w	r3, #4294967295
 8000388:	2201      	movs	r2, #1
 800038a:	4968      	ldr	r1, [pc, #416]	; (800052c <main+0x348>)
 800038c:	4862      	ldr	r0, [pc, #392]	; (8000518 <main+0x334>)
 800038e:	f002 ff35 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[4], 1, HAL_MAX_DELAY);
 8000392:	f04f 33ff 	mov.w	r3, #4294967295
 8000396:	2201      	movs	r2, #1
 8000398:	4965      	ldr	r1, [pc, #404]	; (8000530 <main+0x34c>)
 800039a:	485f      	ldr	r0, [pc, #380]	; (8000518 <main+0x334>)
 800039c:	f002 ff2e 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[5], 1, HAL_MAX_DELAY);
 80003a0:	f04f 33ff 	mov.w	r3, #4294967295
 80003a4:	2201      	movs	r2, #1
 80003a6:	4963      	ldr	r1, [pc, #396]	; (8000534 <main+0x350>)
 80003a8:	485b      	ldr	r0, [pc, #364]	; (8000518 <main+0x334>)
 80003aa:	f002 ff27 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[6], 1, HAL_MAX_DELAY);
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
 80003b2:	2201      	movs	r2, #1
 80003b4:	4960      	ldr	r1, [pc, #384]	; (8000538 <main+0x354>)
 80003b6:	4858      	ldr	r0, [pc, #352]	; (8000518 <main+0x334>)
 80003b8:	f002 ff20 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[7], 1, HAL_MAX_DELAY);
 80003bc:	f04f 33ff 	mov.w	r3, #4294967295
 80003c0:	2201      	movs	r2, #1
 80003c2:	495e      	ldr	r1, [pc, #376]	; (800053c <main+0x358>)
 80003c4:	4854      	ldr	r0, [pc, #336]	; (8000518 <main+0x334>)
 80003c6:	f002 ff19 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[8], 1, HAL_MAX_DELAY);
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	2201      	movs	r2, #1
 80003d0:	495b      	ldr	r1, [pc, #364]	; (8000540 <main+0x35c>)
 80003d2:	4851      	ldr	r0, [pc, #324]	; (8000518 <main+0x334>)
 80003d4:	f002 ff12 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[9], 1, HAL_MAX_DELAY);
 80003d8:	f04f 33ff 	mov.w	r3, #4294967295
 80003dc:	2201      	movs	r2, #1
 80003de:	4959      	ldr	r1, [pc, #356]	; (8000544 <main+0x360>)
 80003e0:	484d      	ldr	r0, [pc, #308]	; (8000518 <main+0x334>)
 80003e2:	f002 ff0b 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[10], 1, HAL_MAX_DELAY);
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ea:	2201      	movs	r2, #1
 80003ec:	4956      	ldr	r1, [pc, #344]	; (8000548 <main+0x364>)
 80003ee:	484a      	ldr	r0, [pc, #296]	; (8000518 <main+0x334>)
 80003f0:	f002 ff04 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[11], 1, HAL_MAX_DELAY);
 80003f4:	f04f 33ff 	mov.w	r3, #4294967295
 80003f8:	2201      	movs	r2, #1
 80003fa:	4954      	ldr	r1, [pc, #336]	; (800054c <main+0x368>)
 80003fc:	4846      	ldr	r0, [pc, #280]	; (8000518 <main+0x334>)
 80003fe:	f002 fefd 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[12], 1, HAL_MAX_DELAY);
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
 8000406:	2201      	movs	r2, #1
 8000408:	4951      	ldr	r1, [pc, #324]	; (8000550 <main+0x36c>)
 800040a:	4843      	ldr	r0, [pc, #268]	; (8000518 <main+0x334>)
 800040c:	f002 fef6 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[13], 1, HAL_MAX_DELAY);
 8000410:	f04f 33ff 	mov.w	r3, #4294967295
 8000414:	2201      	movs	r2, #1
 8000416:	494f      	ldr	r1, [pc, #316]	; (8000554 <main+0x370>)
 8000418:	483f      	ldr	r0, [pc, #252]	; (8000518 <main+0x334>)
 800041a:	f002 feef 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[14], 1, HAL_MAX_DELAY);
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
 8000422:	2201      	movs	r2, #1
 8000424:	494c      	ldr	r1, [pc, #304]	; (8000558 <main+0x374>)
 8000426:	483c      	ldr	r0, [pc, #240]	; (8000518 <main+0x334>)
 8000428:	f002 fee8 	bl	80031fc <HAL_UART_Transmit>

			  receiveBuffer[15] = '\r';
 800042c:	4b3c      	ldr	r3, [pc, #240]	; (8000520 <main+0x33c>)
 800042e:	220d      	movs	r2, #13
 8000430:	73da      	strb	r2, [r3, #15]
			  receiveBuffer[16] = '\n';
 8000432:	4b3b      	ldr	r3, [pc, #236]	; (8000520 <main+0x33c>)
 8000434:	220a      	movs	r2, #10
 8000436:	741a      	strb	r2, [r3, #16]
			  HAL_UART_Transmit(&huart2, &receiveBuffer[15], 1, HAL_MAX_DELAY);
 8000438:	f04f 33ff 	mov.w	r3, #4294967295
 800043c:	2201      	movs	r2, #1
 800043e:	4947      	ldr	r1, [pc, #284]	; (800055c <main+0x378>)
 8000440:	4835      	ldr	r0, [pc, #212]	; (8000518 <main+0x334>)
 8000442:	f002 fedb 	bl	80031fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &receiveBuffer[16], 1, HAL_MAX_DELAY);
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	2201      	movs	r2, #1
 800044c:	4944      	ldr	r1, [pc, #272]	; (8000560 <main+0x37c>)
 800044e:	4832      	ldr	r0, [pc, #200]	; (8000518 <main+0x334>)
 8000450:	f002 fed4 	bl	80031fc <HAL_UART_Transmit>
		  }
	  }

	  HAL_Delay(1000);
 8000454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000458:	f000 fb7a 	bl	8000b50 <HAL_Delay>

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ESP_ADDR, transmitBuffer, (sizeof(transmitBuffer) / sizeof(transmitBuffer[0])), HAL_MAX_DELAY); // Transmitting empty packet over I2C
 800045c:	2308      	movs	r3, #8
 800045e:	b299      	uxth	r1, r3
 8000460:	f04f 33ff 	mov.w	r3, #4294967295
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	230f      	movs	r3, #15
 8000468:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <main+0x314>)
 800046a:	4828      	ldr	r0, [pc, #160]	; (800050c <main+0x328>)
 800046c:	f000 feac 	bl	80011c8 <HAL_I2C_Master_Transmit>
 8000470:	4603      	mov	r3, r0
 8000472:	71fb      	strb	r3, [r7, #7]

	  // Use the return value to decide follow up steps and transmit this value over UART
	  if (ret != HAL_OK)
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d01c      	beq.n	80004b4 <main+0x2d0>
	  {
		  strcpy((char*)statusBuffer, "Error while transmitting\r\n");
 800047a:	4a25      	ldr	r2, [pc, #148]	; (8000510 <main+0x32c>)
 800047c:	4b25      	ldr	r3, [pc, #148]	; (8000514 <main+0x330>)
 800047e:	4615      	mov	r5, r2
 8000480:	461c      	mov	r4, r3
 8000482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000484:	6028      	str	r0, [r5, #0]
 8000486:	6069      	str	r1, [r5, #4]
 8000488:	60aa      	str	r2, [r5, #8]
 800048a:	60eb      	str	r3, [r5, #12]
 800048c:	cc03      	ldmia	r4!, {r0, r1}
 800048e:	6128      	str	r0, [r5, #16]
 8000490:	6169      	str	r1, [r5, #20]
 8000492:	8823      	ldrh	r3, [r4, #0]
 8000494:	78a2      	ldrb	r2, [r4, #2]
 8000496:	832b      	strh	r3, [r5, #24]
 8000498:	4613      	mov	r3, r2
 800049a:	76ab      	strb	r3, [r5, #26]
		  HAL_UART_Transmit(&huart2, statusBuffer, strlen((char*)statusBuffer), HAL_MAX_DELAY);
 800049c:	481c      	ldr	r0, [pc, #112]	; (8000510 <main+0x32c>)
 800049e:	f7ff fe99 	bl	80001d4 <strlen>
 80004a2:	4603      	mov	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
 80004aa:	4919      	ldr	r1, [pc, #100]	; (8000510 <main+0x32c>)
 80004ac:	481a      	ldr	r0, [pc, #104]	; (8000518 <main+0x334>)
 80004ae:	f002 fea5 	bl	80031fc <HAL_UART_Transmit>
 80004b2:	e01b      	b.n	80004ec <main+0x308>
	  }
	  else
	  {
		  strcpy((char*)statusBuffer, "Successfully transmitted\r\n");
 80004b4:	4a16      	ldr	r2, [pc, #88]	; (8000510 <main+0x32c>)
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <main+0x338>)
 80004b8:	4615      	mov	r5, r2
 80004ba:	461c      	mov	r4, r3
 80004bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004be:	6028      	str	r0, [r5, #0]
 80004c0:	6069      	str	r1, [r5, #4]
 80004c2:	60aa      	str	r2, [r5, #8]
 80004c4:	60eb      	str	r3, [r5, #12]
 80004c6:	cc03      	ldmia	r4!, {r0, r1}
 80004c8:	6128      	str	r0, [r5, #16]
 80004ca:	6169      	str	r1, [r5, #20]
 80004cc:	8823      	ldrh	r3, [r4, #0]
 80004ce:	78a2      	ldrb	r2, [r4, #2]
 80004d0:	832b      	strh	r3, [r5, #24]
 80004d2:	4613      	mov	r3, r2
 80004d4:	76ab      	strb	r3, [r5, #26]
		  HAL_UART_Transmit(&huart2, statusBuffer, strlen((char*)statusBuffer), HAL_MAX_DELAY);
 80004d6:	480e      	ldr	r0, [pc, #56]	; (8000510 <main+0x32c>)
 80004d8:	f7ff fe7c 	bl	80001d4 <strlen>
 80004dc:	4603      	mov	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	f04f 33ff 	mov.w	r3, #4294967295
 80004e4:	490a      	ldr	r1, [pc, #40]	; (8000510 <main+0x32c>)
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <main+0x334>)
 80004e8:	f002 fe88 	bl	80031fc <HAL_UART_Transmit>
	  }

	  HAL_Delay(1000);
 80004ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f0:	f000 fb2e 	bl	8000b50 <HAL_Delay>
	  seed = 0;
 80004f4:	e6c8      	b.n	8000288 <main+0xa4>
 80004f6:	bf00      	nop
 80004f8:	20000094 	.word	0x20000094
 80004fc:	20000096 	.word	0x20000096
 8000500:	20000128 	.word	0x20000128
 8000504:	2000012a 	.word	0x2000012a
 8000508:	20000028 	.word	0x20000028
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000078 	.word	0x20000078
 8000514:	08003a10 	.word	0x08003a10
 8000518:	200000a4 	.word	0x200000a4
 800051c:	08003a2c 	.word	0x08003a2c
 8000520:	2000012c 	.word	0x2000012c
 8000524:	08003a48 	.word	0x08003a48
 8000528:	2000012e 	.word	0x2000012e
 800052c:	2000012f 	.word	0x2000012f
 8000530:	20000130 	.word	0x20000130
 8000534:	20000131 	.word	0x20000131
 8000538:	20000132 	.word	0x20000132
 800053c:	20000133 	.word	0x20000133
 8000540:	20000134 	.word	0x20000134
 8000544:	20000135 	.word	0x20000135
 8000548:	20000136 	.word	0x20000136
 800054c:	20000137 	.word	0x20000137
 8000550:	20000138 	.word	0x20000138
 8000554:	20000139 	.word	0x20000139
 8000558:	2000013a 	.word	0x2000013a
 800055c:	2000013b 	.word	0x2000013b
 8000560:	2000013c 	.word	0x2000013c

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b0a6      	sub	sp, #152	; 0x98
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800056e:	2228      	movs	r2, #40	; 0x28
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fa38 	bl	80039e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2258      	movs	r2, #88	; 0x58
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa2a 	bl	80039e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fa62 	bl	8001a8c <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f941 	bl	8000854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 f962 	bl	80028b8 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fa:	f000 f92b 	bl	8000854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005fe:	2322      	movs	r3, #34	; 0x22
 8000600:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fb89 	bl	8002d24 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000618:	f000 f91c 	bl	8000854 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3798      	adds	r7, #152	; 0x98
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_I2C1_Init+0x74>)
 800062a:	4a1c      	ldr	r2, [pc, #112]	; (800069c <MX_I2C1_Init+0x78>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_I2C1_Init+0x74>)
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_I2C1_Init+0x7c>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_I2C1_Init+0x74>)
 800063c:	2201      	movs	r2, #1
 800063e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_I2C1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065e:	480e      	ldr	r0, [pc, #56]	; (8000698 <MX_I2C1_Init+0x74>)
 8000660:	f000 fd22 	bl	80010a8 <HAL_I2C_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066a:	f000 f8f3 	bl	8000854 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800066e:	2100      	movs	r1, #0
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_I2C1_Init+0x74>)
 8000672:	f001 f973 	bl	800195c <HAL_I2CEx_ConfigAnalogFilter>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800067c:	f000 f8ea 	bl	8000854 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000680:	2100      	movs	r1, #0
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_I2C1_Init+0x74>)
 8000684:	f001 f9b5 	bl	80019f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800068e:	f000 f8e1 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000002c 	.word	0x2000002c
 800069c:	40005400 	.word	0x40005400
 80006a0:	2000090e 	.word	0x2000090e

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006e8:	f002 fd3a 	bl	8003160 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f8af 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000a4 	.word	0x200000a4
 8000700:	40004400 	.word	0x40004400

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <MX_GPIO_Init+0xc4>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a2a      	ldr	r2, [pc, #168]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_GPIO_Init+0xc4>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a1e      	ldr	r2, [pc, #120]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f000 fc79 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_GPIO_Init+0xc8>)
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_GPIO_Init+0xcc>)
 800079c:	f000 fae2 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a0:	2320      	movs	r3, #32
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f000 fad3 	bl	8000d64 <HAL_GPIO_Init>

}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	; 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000
 80007cc:	10210000 	.word	0x10210000
 80007d0:	48000800 	.word	0x48000800

080007d4 <crc_calc>:

/* USER CODE BEGIN 4 */
uint8_t crc_calc(uint8_t *data, unsigned int length)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
    uint8_t crc = seed;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <crc_calc+0x7c>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	75fb      	strb	r3, [r7, #23]
    uint8_t extract;
    uint8_t sum;

    for (unsigned int i = 0; i < length; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	e026      	b.n	8000838 <crc_calc+0x64>
        extract = *data;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	75bb      	strb	r3, [r7, #22]

        for (char j = 8; j; j--) {
 80007f0:	2308      	movs	r3, #8
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	e017      	b.n	8000826 <crc_calc+0x52>
            sum = (crc ^ extract) & 0x01;
 80007f6:	7dfa      	ldrb	r2, [r7, #23]
 80007f8:	7dbb      	ldrb	r3, [r7, #22]
 80007fa:	4053      	eors	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
            crc >>= 1;
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	085b      	lsrs	r3, r3, #1
 8000808:	75fb      	strb	r3, [r7, #23]
            if (sum) {
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d004      	beq.n	800081a <crc_calc+0x46>
                crc ^= 0x8C;
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000816:	43db      	mvns	r3, r3
 8000818:	75fb      	strb	r3, [r7, #23]
            }
            extract >>= 1;
 800081a:	7dbb      	ldrb	r3, [r7, #22]
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	75bb      	strb	r3, [r7, #22]
        for (char j = 8; j; j--) {
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	3b01      	subs	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1e4      	bne.n	80007f6 <crc_calc+0x22>
        }

        data++;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
    for (unsigned int i = 0; i < length; i++) {
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	3301      	adds	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d3d4      	bcc.n	80007ea <crc_calc+0x16>
    }

    return crc;
 8000840:	7dfb      	ldrb	r3, [r7, #23]
}
 8000842:	4618      	mov	r0, r3
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000028 	.word	0x20000028

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x44>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_MspInit+0x44>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x44>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x44>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x44>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089a:	2007      	movs	r0, #7
 800089c:	f000 fa2e 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a18      	ldr	r2, [pc, #96]	; (800092c <HAL_I2C_MspInit+0x80>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d129      	bne.n	8000922 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_I2C_MspInit+0x84>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_I2C_MspInit+0x84>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_I2C_MspInit+0x84>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ec:	2312      	movs	r3, #18
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f8:	2304      	movs	r3, #4
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fa2d 	bl	8000d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_I2C_MspInit+0x84>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_I2C_MspInit+0x84>)
 8000910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_I2C_MspInit+0x84>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40005400 	.word	0x40005400
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0x7c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d128      	bne.n	80009a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <HAL_UART_MspInit+0x80>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_UART_MspInit+0x80>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000986:	230c      	movs	r3, #12
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000996:	2307      	movs	r3, #7
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f000 f9de 	bl	8000d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40004400 	.word	0x40004400
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f884 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5a:	f7ff ffd7 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f002 ff9f 	bl	80039a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a62:	f7ff fbbf 	bl	80001e4 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a74:	08003aa4 	.word	0x08003aa4
  ldr r2, =_sbss
 8000a78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a7c:	20000144 	.word	0x20000144

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f931 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f808 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fee0 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x58>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f93b 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d80a      	bhi.n	8000afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f911 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_InitTick+0x5c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000140 	.word	0x20000140

08000b38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000140 	.word	0x20000140

08000b50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffde 	bl	8000b38 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff47 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5c 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e160      	b.n	8001036 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8152 	beq.w	8001030 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d00b      	beq.n	8000dac <HAL_GPIO_Init+0x48>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d007      	beq.n	8000dac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da0:	2b11      	cmp	r3, #17
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b12      	cmp	r3, #18
 8000daa:	d130      	bne.n	8000e0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de2:	2201      	movs	r2, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	091b      	lsrs	r3, r3, #4
 8000df8:	f003 0201 	and.w	r2, r3, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0xea>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d123      	bne.n	8000e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	6939      	ldr	r1, [r7, #16]
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0203 	and.w	r2, r3, #3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 80ac 	beq.w	8001030 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed8:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <HAL_GPIO_Init+0x2f0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a5d      	ldr	r2, [pc, #372]	; (8001054 <HAL_GPIO_Init+0x2f0>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <HAL_GPIO_Init+0x2f0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef0:	4a59      	ldr	r2, [pc, #356]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f1a:	d025      	beq.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4f      	ldr	r2, [pc, #316]	; (800105c <HAL_GPIO_Init+0x2f8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d01f      	beq.n	8000f64 <HAL_GPIO_Init+0x200>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <HAL_GPIO_Init+0x2fc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d019      	beq.n	8000f60 <HAL_GPIO_Init+0x1fc>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d013      	beq.n	8000f5c <HAL_GPIO_Init+0x1f8>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d00d      	beq.n	8000f58 <HAL_GPIO_Init+0x1f4>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_GPIO_Init+0x308>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0x1f0>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_GPIO_Init+0x1ec>
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	e00c      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f50:	2307      	movs	r3, #7
 8000f52:	e00a      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f54:	2305      	movs	r3, #5
 8000f56:	e008      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e004      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	f002 0203 	and.w	r2, r2, #3
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7a:	4937      	ldr	r1, [pc, #220]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fac:	4a31      	ldr	r2, [pc, #196]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd6:	4a27      	ldr	r2, [pc, #156]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_GPIO_Init+0x310>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_GPIO_Init+0x310>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_GPIO_Init+0x310>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	f47f ae97 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00
 8001068:	48001000 	.word	0x48001000
 800106c:	48001400 	.word	0x48001400
 8001070:	48001800 	.word	0x48001800
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e081      	b.n	80011be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fbec 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2224      	movs	r2, #36	; 0x24
 80010d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001108:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d107      	bne.n	8001122 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	e006      	b.n	8001130 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800112e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d104      	bne.n	8001142 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001140:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001154:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001164:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	ea42 0103 	orr.w	r1, r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	021a      	lsls	r2, r3, #8
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69d9      	ldr	r1, [r3, #28]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	461a      	mov	r2, r3
 80011d4:	460b      	mov	r3, r1
 80011d6:	817b      	strh	r3, [r7, #10]
 80011d8:	4613      	mov	r3, r2
 80011da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	f040 80da 	bne.w	800139e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_I2C_Master_Transmit+0x30>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e0d3      	b.n	80013a0 <HAL_I2C_Master_Transmit+0x1d8>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001200:	f7ff fc9a 	bl	8000b38 <HAL_GetTick>
 8001204:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2319      	movs	r3, #25
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f9e6 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0be      	b.n	80013a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2221      	movs	r2, #33	; 0x21
 8001226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2210      	movs	r2, #16
 800122e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	893a      	ldrh	r2, [r7, #8]
 8001242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124e:	b29b      	uxth	r3, r3
 8001250:	2bff      	cmp	r3, #255	; 0xff
 8001252:	d90e      	bls.n	8001272 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	22ff      	movs	r2, #255	; 0xff
 8001258:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125e:	b2da      	uxtb	r2, r3
 8001260:	8979      	ldrh	r1, [r7, #10]
 8001262:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 fb48 	bl	8001900 <I2C_TransferConfig>
 8001270:	e06c      	b.n	800134c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001276:	b29a      	uxth	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001280:	b2da      	uxtb	r2, r3
 8001282:	8979      	ldrh	r1, [r7, #10]
 8001284:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 fb37 	bl	8001900 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001292:	e05b      	b.n	800134c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	6a39      	ldr	r1, [r7, #32]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 f9e3 	bl	8001664 <I2C_WaitOnTXISFlagUntilTimeout>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e07b      	b.n	80013a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012dc:	b29b      	uxth	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d034      	beq.n	800134c <HAL_I2C_Master_Transmit+0x184>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d130      	bne.n	800134c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	2200      	movs	r2, #0
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f975 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e04d      	b.n	80013a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	2bff      	cmp	r3, #255	; 0xff
 800130c:	d90e      	bls.n	800132c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	22ff      	movs	r2, #255	; 0xff
 8001312:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001318:	b2da      	uxtb	r2, r3
 800131a:	8979      	ldrh	r1, [r7, #10]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 faeb 	bl	8001900 <I2C_TransferConfig>
 800132a:	e00f      	b.n	800134c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001330:	b29a      	uxth	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133a:	b2da      	uxtb	r2, r3
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	2300      	movs	r3, #0
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fada 	bl	8001900 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001350:	b29b      	uxth	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d19e      	bne.n	8001294 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	6a39      	ldr	r1, [r7, #32]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f9c2 	bl	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e01a      	b.n	80013a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2220      	movs	r2, #32
 8001370:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_I2C_Master_Transmit+0x1e4>)
 800137e:	400b      	ands	r3, r1
 8001380:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2220      	movs	r2, #32
 8001386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800139e:	2302      	movs	r3, #2
  }
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	80002000 	.word	0x80002000
 80013ac:	fe00e800 	.word	0xfe00e800

080013b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	817b      	strh	r3, [r7, #10]
 80013c0:	4613      	mov	r3, r2
 80013c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b20      	cmp	r3, #32
 80013ce:	f040 80db 	bne.w	8001588 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_I2C_Master_Receive+0x30>
 80013dc:	2302      	movs	r3, #2
 80013de:	e0d4      	b.n	800158a <HAL_I2C_Master_Receive+0x1da>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013e8:	f7ff fba6 	bl	8000b38 <HAL_GetTick>
 80013ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2319      	movs	r3, #25
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f8f2 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e0bf      	b.n	800158a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2222      	movs	r2, #34	; 0x22
 800140e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2210      	movs	r2, #16
 8001416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	893a      	ldrh	r2, [r7, #8]
 800142a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001436:	b29b      	uxth	r3, r3
 8001438:	2bff      	cmp	r3, #255	; 0xff
 800143a:	d90e      	bls.n	800145a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001446:	b2da      	uxtb	r2, r3
 8001448:	8979      	ldrh	r1, [r7, #10]
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <HAL_I2C_Master_Receive+0x1e4>)
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 fa54 	bl	8001900 <I2C_TransferConfig>
 8001458:	e06d      	b.n	8001536 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001468:	b2da      	uxtb	r2, r3
 800146a:	8979      	ldrh	r1, [r7, #10]
 800146c:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_I2C_Master_Receive+0x1e4>)
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 fa43 	bl	8001900 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800147a:	e05c      	b.n	8001536 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	6a39      	ldr	r1, [r7, #32]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f96b 	bl	800175c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e07c      	b.n	800158a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ac:	3b01      	subs	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d034      	beq.n	8001536 <HAL_I2C_Master_Receive+0x186>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d130      	bne.n	8001536 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	2200      	movs	r2, #0
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f880 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e04d      	b.n	800158a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2bff      	cmp	r3, #255	; 0xff
 80014f6:	d90e      	bls.n	8001516 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	22ff      	movs	r2, #255	; 0xff
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001502:	b2da      	uxtb	r2, r3
 8001504:	8979      	ldrh	r1, [r7, #10]
 8001506:	2300      	movs	r3, #0
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f9f6 	bl	8001900 <I2C_TransferConfig>
 8001514:	e00f      	b.n	8001536 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151a:	b29a      	uxth	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	b2da      	uxtb	r2, r3
 8001526:	8979      	ldrh	r1, [r7, #10]
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 f9e5 	bl	8001900 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153a:	b29b      	uxth	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d19d      	bne.n	800147c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	6a39      	ldr	r1, [r7, #32]
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f8cd 	bl	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e01a      	b.n	800158a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2220      	movs	r2, #32
 800155a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_I2C_Master_Receive+0x1e8>)
 8001568:	400b      	ands	r3, r1
 800156a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2220      	movs	r2, #32
 8001570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	e000      	b.n	800158a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001588:	2302      	movs	r3, #2
  }
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	80002400 	.word	0x80002400
 8001598:	fe00e800 	.word	0xfe00e800

0800159c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d103      	bne.n	80015ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d007      	beq.n	80015d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	619a      	str	r2, [r3, #24]
  }
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015f4:	e022      	b.n	800163c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d01e      	beq.n	800163c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015fe:	f7ff fa9b 	bl	8000b38 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d302      	bcc.n	8001614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d113      	bne.n	800163c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	f043 0220 	orr.w	r2, r3, #32
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e00f      	b.n	800165c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4013      	ands	r3, r2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	bf0c      	ite	eq
 800164c:	2301      	moveq	r3, #1
 800164e:	2300      	movne	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	429a      	cmp	r2, r3
 8001658:	d0cd      	beq.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001670:	e02c      	b.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f8dc 	bl	8001834 <I2C_IsAcknowledgeFailed>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e02a      	b.n	80016dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168c:	d01e      	beq.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168e:	f7ff fa53 	bl	8000b38 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	429a      	cmp	r2, r3
 800169c:	d302      	bcc.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d113      	bne.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f043 0220 	orr.w	r2, r3, #32
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e007      	b.n	80016dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d1cb      	bne.n	8001672 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f0:	e028      	b.n	8001744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f89c 	bl	8001834 <I2C_IsAcknowledgeFailed>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e026      	b.n	8001754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001706:	f7ff fa17 	bl	8000b38 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	429a      	cmp	r2, r3
 8001714:	d302      	bcc.n	800171c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d113      	bne.n	8001744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f043 0220 	orr.w	r2, r3, #32
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2220      	movs	r2, #32
 800172c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e007      	b.n	8001754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b20      	cmp	r3, #32
 8001750:	d1cf      	bne.n	80016f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001768:	e055      	b.n	8001816 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f860 	bl	8001834 <I2C_IsAcknowledgeFailed>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e053      	b.n	8001826 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	2b20      	cmp	r3, #32
 800178a:	d129      	bne.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d105      	bne.n	80017a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e03f      	b.n	8001826 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2220      	movs	r2, #32
 80017ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80017ba:	400b      	ands	r3, r1
 80017bc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e022      	b.n	8001826 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e0:	f7ff f9aa 	bl	8000b38 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d302      	bcc.n	80017f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f043 0220 	orr.w	r2, r3, #32
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2220      	movs	r2, #32
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e007      	b.n	8001826 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b04      	cmp	r3, #4
 8001822:	d1a2      	bne.n	800176a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	fe00e800 	.word	0xfe00e800

08001834 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b10      	cmp	r3, #16
 800184c:	d151      	bne.n	80018f2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800184e:	e022      	b.n	8001896 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001856:	d01e      	beq.n	8001896 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001858:	f7ff f96e 	bl	8000b38 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	429a      	cmp	r2, r3
 8001866:	d302      	bcc.n	800186e <I2C_IsAcknowledgeFailed+0x3a>
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d113      	bne.n	8001896 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f043 0220 	orr.w	r2, r3, #32
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e02e      	b.n	80018f4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	d1d5      	bne.n	8001850 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2210      	movs	r2, #16
 80018aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2220      	movs	r2, #32
 80018b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f7ff fe71 	bl	800159c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <I2C_IsAcknowledgeFailed+0xc8>)
 80018c6:	400b      	ands	r3, r1
 80018c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f043 0204 	orr.w	r2, r3, #4
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	fe00e800 	.word	0xfe00e800

08001900 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	817b      	strh	r3, [r7, #10]
 800190e:	4613      	mov	r3, r2
 8001910:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	0d5b      	lsrs	r3, r3, #21
 800191c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <I2C_TransferConfig+0x58>)
 8001922:	430b      	orrs	r3, r1
 8001924:	43db      	mvns	r3, r3
 8001926:	ea02 0103 	and.w	r1, r2, r3
 800192a:	897b      	ldrh	r3, [r7, #10]
 800192c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001930:	7a7b      	ldrb	r3, [r7, #9]
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	431a      	orrs	r2, r3
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	03ff63ff 	.word	0x03ff63ff

0800195c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b20      	cmp	r3, #32
 8001970:	d138      	bne.n	80019e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800197c:	2302      	movs	r3, #2
 800197e:	e032      	b.n	80019e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2224      	movs	r2, #36	; 0x24
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e000      	b.n	80019e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019e4:	2302      	movs	r3, #2
  }
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d139      	bne.n	8001a7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e033      	b.n	8001a7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2224      	movs	r2, #36	; 0x24
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a7c:	2302      	movs	r3, #2
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f000 bf01 	b.w	80028a8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8160 	beq.w	8001d76 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ab6:	4bae      	ldr	r3, [pc, #696]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d00c      	beq.n	8001adc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac2:	4bab      	ldr	r3, [pc, #684]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d159      	bne.n	8001b82 <HAL_RCC_OscConfig+0xf6>
 8001ace:	4ba8      	ldr	r3, [pc, #672]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ada:	d152      	bne.n	8001b82 <HAL_RCC_OscConfig+0xf6>
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_OscConfig+0x82>
 8001b08:	4b99      	ldr	r3, [pc, #612]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0xae>
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b26:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b2a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b36:	4b8e      	ldr	r3, [pc, #568]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b3e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b42:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b46:	fa92 f2a2 	rbit	r2, r2
 8001b4a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001b4e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f002 021f 	and.w	r2, r2, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8102 	beq.w	8001d74 <HAL_RCC_OscConfig+0x2e8>
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 80fc 	bne.w	8001d74 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f000 be93 	b.w	80028a8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d106      	bne.n	8001b9c <HAL_RCC_OscConfig+0x110>
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e030      	b.n	8001bfe <HAL_RCC_OscConfig+0x172>
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x134>
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a71      	ldr	r2, [pc, #452]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e01e      	b.n	8001bfe <HAL_RCC_OscConfig+0x172>
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x15a>
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a67      	ldr	r2, [pc, #412]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a64      	ldr	r2, [pc, #400]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e00b      	b.n	8001bfe <HAL_RCC_OscConfig+0x172>
 8001be6:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a61      	ldr	r2, [pc, #388]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b5f      	ldr	r3, [pc, #380]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5e      	ldr	r2, [pc, #376]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d059      	beq.n	8001cbc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe ff96 	bl	8000b38 <HAL_GetTick>
 8001c0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c12:	f7fe ff91 	bl	8000b38 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d902      	bls.n	8001c28 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	f000 be40 	b.w	80028a8 <HAL_RCC_OscConfig+0xe1c>
 8001c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_OscConfig+0x1ce>
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x1fa>
 8001c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c72:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c8a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001c8e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001c92:	fa92 f2a2 	rbit	r2, r2
 8001c96:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001c9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c9e:	fab2 f282 	clz	r2, r2
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f042 0220 	orr.w	r2, r2, #32
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f002 021f 	and.w	r2, r2, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ab      	beq.n	8001c12 <HAL_RCC_OscConfig+0x186>
 8001cba:	e05c      	b.n	8001d76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ff3c 	bl	8000b38 <HAL_GetTick>
 8001cc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc6:	f7fe ff37 	bl	8000b38 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d902      	bls.n	8001cdc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	f000 bde6 	b.w	80028a8 <HAL_RCC_OscConfig+0xe1c>
 8001cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001cf0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_OscConfig+0x282>
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x2ae>
 8001d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d26:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d3e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d42:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d46:	fa92 f2a2 	rbit	r2, r2
 8001d4a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d4e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f042 0220 	orr.w	r2, r2, #32
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f002 021f 	and.w	r2, r2, #31
 8001d62:	2101      	movs	r1, #1
 8001d64:	fa01 f202 	lsl.w	r2, r1, r2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ab      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x23a>
 8001d6e:	e002      	b.n	8001d76 <HAL_RCC_OscConfig+0x2ea>
 8001d70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 8170 	beq.w	8002066 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d86:	4bd0      	ldr	r3, [pc, #832]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d92:	4bcd      	ldr	r3, [pc, #820]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d16d      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3ee>
 8001d9e:	4bca      	ldr	r3, [pc, #808]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001daa:	d166      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3ee>
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001dbe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <HAL_RCC_OscConfig+0x350>
 8001dd6:	4bbc      	ldr	r3, [pc, #752]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	e013      	b.n	8001e04 <HAL_RCC_OscConfig+0x378>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001df4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e00:	4bb1      	ldr	r3, [pc, #708]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	2202      	movs	r2, #2
 8001e06:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e0a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e0e:	fa92 f2a2 	rbit	r2, r2
 8001e12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e1a:	fab2 f282 	clz	r2, r2
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f042 0220 	orr.w	r2, r2, #32
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f002 021f 	and.w	r2, r2, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3ba>
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d002      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f000 bd31 	b.w	80028a8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4ba0      	ldr	r3, [pc, #640]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	21f8      	movs	r1, #248	; 0xf8
 8001e56:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001e5e:	fa91 f1a1 	rbit	r1, r1
 8001e62:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001e66:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e6a:	fab1 f181 	clz	r1, r1
 8001e6e:	b2c9      	uxtb	r1, r1
 8001e70:	408b      	lsls	r3, r1
 8001e72:	4995      	ldr	r1, [pc, #596]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e78:	e0f5      	b.n	8002066 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8085 	beq.w	8001f90 <HAL_RCC_OscConfig+0x504>
 8001e86:	2301      	movs	r3, #1
 8001e88:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001e98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ea6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	461a      	mov	r2, r3
 8001eae:	2301      	movs	r3, #1
 8001eb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fe41 	bl	8000b38 <HAL_GetTick>
 8001eb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7fe fe3c 	bl	8000b38 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d902      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	f000 bceb 	b.w	80028a8 <HAL_RCC_OscConfig+0xe1c>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001ee4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0x476>
 8001efc:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e013      	b.n	8001f2a <HAL_RCC_OscConfig+0x49e>
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f14:	2302      	movs	r3, #2
 8001f16:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f1a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f26:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f30:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f34:	fa92 f2a2 	rbit	r2, r2
 8001f38:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f3c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f002 021f 	and.w	r2, r2, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0af      	beq.n	8001ebc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b5a      	ldr	r3, [pc, #360]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	21f8      	movs	r1, #248	; 0xf8
 8001f6c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001f74:	fa91 f1a1 	rbit	r1, r1
 8001f78:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001f7c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f80:	fab1 f181 	clz	r1, r1
 8001f84:	b2c9      	uxtb	r1, r1
 8001f86:	408b      	lsls	r3, r1
 8001f88:	494f      	ldr	r1, [pc, #316]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
 8001f8e:	e06a      	b.n	8002066 <HAL_RCC_OscConfig+0x5da>
 8001f90:	2301      	movs	r3, #1
 8001f92:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001fa2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fdbc 	bl	8000b38 <HAL_GetTick>
 8001fc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7fe fdb7 	bl	8000b38 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d902      	bls.n	8001fdc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f000 bc66 	b.w	80028a8 <HAL_RCC_OscConfig+0xe1c>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001fee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_RCC_OscConfig+0x580>
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e013      	b.n	8002034 <HAL_RCC_OscConfig+0x5a8>
 800200c:	2302      	movs	r3, #2
 800200e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002024:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <HAL_RCC_OscConfig+0x63c>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2202      	movs	r2, #2
 8002036:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800203a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800203e:	fa92 f2a2 	rbit	r2, r2
 8002042:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002046:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f002 021f 	and.w	r2, r2, #31
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1af      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80da 	beq.w	800222a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d069      	beq.n	8002154 <HAL_RCC_OscConfig+0x6c8>
 8002080:	2301      	movs	r3, #1
 8002082:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002092:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x640>)
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	461a      	mov	r2, r3
 80020a6:	2301      	movs	r3, #1
 80020a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7fe fd45 	bl	8000b38 <HAL_GetTick>
 80020ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	e00d      	b.n	80020d0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b4:	f7fe fd40 	bl	8000b38 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d905      	bls.n	80020d0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e3ef      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	10908120 	.word	0x10908120
 80020d0:	2302      	movs	r3, #2
 80020d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020da:	fa93 f2a3 	rbit	r2, r3
 80020de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80020e8:	2202      	movs	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002112:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002114:	4ba4      	ldr	r3, [pc, #656]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 8002116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002118:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800211c:	2102      	movs	r1, #2
 800211e:	6019      	str	r1, [r3, #0]
 8002120:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f1a3 	rbit	r1, r3
 800212a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800212e:	6019      	str	r1, [r3, #0]
  return result;
 8002130:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0b0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x628>
 8002152:	e06a      	b.n	800222a <HAL_RCC_OscConfig+0x79e>
 8002154:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800216a:	601a      	str	r2, [r3, #0]
  return result;
 800216c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002170:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_RCC_OscConfig+0x920>)
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	461a      	mov	r2, r3
 8002182:	2300      	movs	r3, #0
 8002184:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7fe fcd7 	bl	8000b38 <HAL_GetTick>
 800218a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218e:	e009      	b.n	80021a4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002190:	f7fe fcd2 	bl	8000b38 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e381      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
 80021a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021a8:	2202      	movs	r2, #2
 80021aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	fa93 f2a3 	rbit	r2, r3
 80021b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021d8:	2202      	movs	r2, #2
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fa93 f2a3 	rbit	r2, r3
 80021e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80021ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021f4:	2102      	movs	r1, #2
 80021f6:	6019      	str	r1, [r3, #0]
 80021f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f1a3 	rbit	r1, r3
 8002202:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002206:	6019      	str	r1, [r3, #0]
  return result;
 8002208:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1b2      	bne.n	8002190 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8157 	beq.w	80024e8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d112      	bne.n	8002272 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a55      	ldr	r2, [pc, #340]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	61d3      	str	r3, [r2, #28]
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800226c:	2301      	movs	r3, #1
 800226e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_OscConfig+0x924>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11a      	bne.n	80022b4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_OscConfig+0x924>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a4b      	ldr	r2, [pc, #300]	; (80023b0 <HAL_RCC_OscConfig+0x924>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7fe fc55 	bl	8000b38 <HAL_GetTick>
 800228e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	e009      	b.n	80022a8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002294:	f7fe fc50 	bl	8000b38 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e2ff      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_OscConfig+0x924>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x840>
 80022be:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a39      	ldr	r2, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	e02f      	b.n	800232c <HAL_RCC_OscConfig+0x8a0>
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x864>
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	6213      	str	r3, [r2, #32]
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80022e8:	f023 0304 	bic.w	r3, r3, #4
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0x8a0>
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x888>
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x8a0>
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d06a      	beq.n	800240c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7fe fbff 	bl	8000b38 <HAL_GetTick>
 800233a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	e00b      	b.n	8002358 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7fe fbfa 	bl	8000b38 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e2a7      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
 8002358:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800235c:	2202      	movs	r2, #2
 800235e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002386:	601a      	str	r2, [r3, #0]
  return result;
 8002388:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800238c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d108      	bne.n	80023b4 <HAL_RCC_OscConfig+0x928>
 80023a2:	4b01      	ldr	r3, [pc, #4]	; (80023a8 <HAL_RCC_OscConfig+0x91c>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	e013      	b.n	80023d0 <HAL_RCC_OscConfig+0x944>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	10908120 	.word	0x10908120
 80023b0:	40007000 	.word	0x40007000
 80023b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023b8:	2202      	movs	r2, #2
 80023ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	4bc0      	ldr	r3, [pc, #768]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80023d4:	2102      	movs	r1, #2
 80023d6:	6011      	str	r1, [r2, #0]
 80023d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	fa92 f1a2 	rbit	r1, r2
 80023e2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023e6:	6011      	str	r1, [r2, #0]
  return result;
 80023e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	fab2 f282 	clz	r2, r2
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f002 021f 	and.w	r2, r2, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f202 	lsl.w	r2, r1, r2
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d09a      	beq.n	8002340 <HAL_RCC_OscConfig+0x8b4>
 800240a:	e063      	b.n	80024d4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7fe fb94 	bl	8000b38 <HAL_GetTick>
 8002410:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fb8f 	bl	8000b38 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e23c      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
 800242e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002432:	2202      	movs	r2, #2
 8002434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800244a:	2202      	movs	r2, #2
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	fa93 f2a3 	rbit	r2, r3
 8002458:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800245c:	601a      	str	r2, [r3, #0]
  return result;
 800245e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002462:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d102      	bne.n	800247e <HAL_RCC_OscConfig+0x9f2>
 8002478:	4b95      	ldr	r3, [pc, #596]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	e00d      	b.n	800249a <HAL_RCC_OscConfig+0xa0e>
 800247e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	4b8e      	ldr	r3, [pc, #568]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800249e:	2102      	movs	r1, #2
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	fa92 f1a2 	rbit	r1, r2
 80024ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024b0:	6011      	str	r1, [r2, #0]
  return result;
 80024b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1a0      	bne.n	8002416 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b7c      	ldr	r3, [pc, #496]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a7b      	ldr	r2, [pc, #492]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 81d9 	beq.w	80028a6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f4:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	f000 81a6 	beq.w	800284e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	2b02      	cmp	r3, #2
 800250a:	f040 811e 	bne.w	800274a <HAL_RCC_OscConfig+0xcbe>
 800250e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002512:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f2a3 	rbit	r2, r3
 8002522:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002526:	601a      	str	r2, [r3, #0]
  return result;
 8002528:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800252c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002538:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	461a      	mov	r2, r3
 8002540:	2300      	movs	r3, #0
 8002542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe faf8 	bl	8000b38 <HAL_GetTick>
 8002548:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	e009      	b.n	8002562 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe faf3 	bl	8000b38 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1a2      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
 8002562:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fa93 f2a3 	rbit	r2, r3
 8002576:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800257a:	601a      	str	r2, [r3, #0]
  return result;
 800257c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002580:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_RCC_OscConfig+0xb10>
 8002596:	4b4e      	ldr	r3, [pc, #312]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e01b      	b.n	80025d4 <HAL_RCC_OscConfig+0xb48>
 800259c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	fa93 f2a3 	rbit	r2, r3
 80025ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025dc:	6011      	str	r1, [r2, #0]
 80025de:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	fa92 f1a2 	rbit	r1, r2
 80025e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025ec:	6011      	str	r1, [r2, #0]
  return result;
 80025ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d19e      	bne.n	800254e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002610:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f023 020f 	bic.w	r2, r3, #15
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	492c      	ldr	r1, [pc, #176]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 8002620:	4313      	orrs	r3, r2
 8002622:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6a19      	ldr	r1, [r3, #32]
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	430b      	orrs	r3, r1
 800263a:	4925      	ldr	r1, [pc, #148]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
 8002640:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002658:	601a      	str	r2, [r3, #0]
  return result;
 800265a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800265e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800266a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	461a      	mov	r2, r3
 8002672:	2301      	movs	r3, #1
 8002674:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fa5f 	bl	8000b38 <HAL_GetTick>
 800267a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267e:	e009      	b.n	8002694 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fa5a 	bl	8000b38 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e109      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
 8002694:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	fa93 f2a3 	rbit	r2, r3
 80026a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ac:	601a      	str	r2, [r3, #0]
  return result;
 80026ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_OscConfig+0xc48>
 80026c8:	4b01      	ldr	r3, [pc, #4]	; (80026d0 <HAL_RCC_OscConfig+0xc44>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	e01e      	b.n	800270c <HAL_RCC_OscConfig+0xc80>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0xe28>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002710:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002714:	6011      	str	r1, [r2, #0]
 8002716:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	fa92 f1a2 	rbit	r1, r2
 8002720:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002724:	6011      	str	r1, [r2, #0]
  return result;
 8002726:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	fab2 f282 	clz	r2, r2
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f042 0220 	orr.w	r2, r2, #32
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	f002 021f 	and.w	r2, r2, #31
 800273c:	2101      	movs	r1, #1
 800273e:	fa01 f202 	lsl.w	r2, r1, r2
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d09b      	beq.n	8002680 <HAL_RCC_OscConfig+0xbf4>
 8002748:	e0ad      	b.n	80028a6 <HAL_RCC_OscConfig+0xe1a>
 800274a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800274e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fa93 f2a3 	rbit	r2, r3
 800275e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002762:	601a      	str	r2, [r3, #0]
  return result;
 8002764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002768:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002774:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	461a      	mov	r2, r3
 800277c:	2300      	movs	r3, #0
 800277e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe f9da 	bl	8000b38 <HAL_GetTick>
 8002784:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002788:	e009      	b.n	800279e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278a:	f7fe f9d5 	bl	8000b38 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e084      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
 800279e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027b6:	601a      	str	r2, [r3, #0]
  return result;
 80027b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_RCC_OscConfig+0xd4c>
 80027d2:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_RCC_OscConfig+0xe28>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	e01b      	b.n	8002810 <HAL_RCC_OscConfig+0xd84>
 80027d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fa93 f2a3 	rbit	r2, r3
 80027ec:	f107 0320 	add.w	r3, r7, #32
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_RCC_OscConfig+0xe28>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f107 0214 	add.w	r2, r7, #20
 8002814:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002818:	6011      	str	r1, [r2, #0]
 800281a:	f107 0214 	add.w	r2, r7, #20
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	fa92 f1a2 	rbit	r1, r2
 8002824:	f107 0210 	add.w	r2, r7, #16
 8002828:	6011      	str	r1, [r2, #0]
  return result;
 800282a:	f107 0210 	add.w	r2, r7, #16
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d19e      	bne.n	800278a <HAL_RCC_OscConfig+0xcfe>
 800284c:	e02b      	b.n	80028a6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e025      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_RCC_OscConfig+0xe28>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_RCC_OscConfig+0xe28>)
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800286c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002870:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	429a      	cmp	r2, r3
 800287c:	d111      	bne.n	80028a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800287e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002882:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800288c:	429a      	cmp	r2, r3
 800288e:	d108      	bne.n	80028a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002894:	f003 020f 	and.w	r2, r3, #15
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b09e      	sub	sp, #120	; 0x78
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e162      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b90      	ldr	r3, [pc, #576]	; (8002b14 <HAL_RCC_ClockConfig+0x25c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b8d      	ldr	r3, [pc, #564]	; (8002b14 <HAL_RCC_ClockConfig+0x25c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	498b      	ldr	r1, [pc, #556]	; (8002b14 <HAL_RCC_ClockConfig+0x25c>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b89      	ldr	r3, [pc, #548]	; (8002b14 <HAL_RCC_ClockConfig+0x25c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e14a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b82      	ldr	r3, [pc, #520]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	497f      	ldr	r1, [pc, #508]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80dc 	beq.w	8002ae4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d13c      	bne.n	80029ae <HAL_RCC_ClockConfig+0xf6>
 8002934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002938:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d102      	bne.n	800295e <HAL_RCC_ClockConfig+0xa6>
 8002958:	4b6f      	ldr	r3, [pc, #444]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	e00f      	b.n	800297e <HAL_RCC_ClockConfig+0xc6>
 800295e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002962:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	667b      	str	r3, [r7, #100]	; 0x64
 800296c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002970:	663b      	str	r3, [r7, #96]	; 0x60
 8002972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800297a:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002982:	65ba      	str	r2, [r7, #88]	; 0x58
 8002984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002986:	fa92 f2a2 	rbit	r2, r2
 800298a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800298c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f042 0220 	orr.w	r2, r2, #32
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d17b      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0f3      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d13c      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x178>
 80029b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d102      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x128>
 80029da:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e00f      	b.n	8002a00 <HAL_RCC_ClockConfig+0x148>
 80029e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
 80029ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40
 80029f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fc:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a04:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a08:	fa92 f2a2 	rbit	r2, r2
 8002a0c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a10:	fab2 f282 	clz	r2, r2
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f002 021f 	and.w	r2, r2, #31
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f202 	lsl.w	r2, r1, r2
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d13a      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b2      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2de>
 8002a30:	2302      	movs	r3, #2
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x1a0>
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e00d      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1bc>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2202      	movs	r2, #2
 8002a76:	61ba      	str	r2, [r7, #24]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	617a      	str	r2, [r7, #20]
  return result;
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f042 0220 	orr.w	r2, r2, #32
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f002 021f 	and.w	r2, r2, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e079      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	491a      	ldr	r1, [pc, #104]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe f840 	bl	8000b38 <HAL_GetTick>
 8002ab8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe f83c 	bl	8000b38 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e061      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_RCC_ClockConfig+0x260>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_ClockConfig+0x25c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d214      	bcs.n	8002b1c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_RCC_ClockConfig+0x25c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4906      	ldr	r1, [pc, #24]	; (8002b14 <HAL_RCC_ClockConfig+0x25c>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <HAL_RCC_ClockConfig+0x25c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e040      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2de>
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	491a      	ldr	r1, [pc, #104]	; (8002ba0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4912      	ldr	r1, [pc, #72]	; (8002ba0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b5a:	f000 f829 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b5e:	4601      	mov	r1, r0
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b68:	22f0      	movs	r2, #240	; 0xf0
 8002b6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	fa92 f2a2 	rbit	r2, r2
 8002b72:	60fa      	str	r2, [r7, #12]
  return result;
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	40d3      	lsrs	r3, r2
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x2ec>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	fa21 f303 	lsr.w	r3, r1, r3
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <HAL_RCC_ClockConfig+0x2f0>)
 8002b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCC_ClockConfig+0x2f4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd ff8e 	bl	8000ab0 <HAL_InitTick>
  
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3778      	adds	r7, #120	; 0x78
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08003a64 	.word	0x08003a64
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b08b      	sub	sp, #44	; 0x2c
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bca:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d002      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bde:	e03f      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002be2:	623b      	str	r3, [r7, #32]
      break;
 8002be4:	e03f      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bf0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	fa92 f2a2 	rbit	r2, r2
 8002bf8:	607a      	str	r2, [r7, #4]
  return result;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	40d3      	lsrs	r3, r2
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	220f      	movs	r2, #15
 8002c14:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	fa92 f2a2 	rbit	r2, r2
 8002c1c:	60fa      	str	r2, [r7, #12]
  return result;
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	40d3      	lsrs	r3, r2
 8002c28:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c38:	4a0f      	ldr	r2, [pc, #60]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	e007      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	623b      	str	r3, [r7, #32]
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c62:	623b      	str	r3, [r7, #32]
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	6a3b      	ldr	r3, [r7, #32]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	372c      	adds	r7, #44	; 0x2c
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40021000 	.word	0x40021000
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	08003a7c 	.word	0x08003a7c
 8002c80:	08003a8c 	.word	0x08003a8c

08002c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000000 	.word	0x20000000

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ca2:	f7ff ffef 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cb0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	fa92 f2a2 	rbit	r2, r2
 8002cbc:	603a      	str	r2, [r7, #0]
  return result;
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	40d3      	lsrs	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08003a74 	.word	0x08003a74

08002ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ce6:	f7ff ffcd 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002cea:	4601      	mov	r1, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cf4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cf8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	603a      	str	r2, [r7, #0]
  return result;
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	40d3      	lsrs	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08003a74 	.word	0x08003a74

08002d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b092      	sub	sp, #72	; 0x48
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80d4 	beq.w	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d48:	4b4e      	ldr	r3, [pc, #312]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10e      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	4a4a      	ldr	r2, [pc, #296]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	61d3      	str	r3, [r2, #28]
 8002d60:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d72:	4b45      	ldr	r3, [pc, #276]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7e:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a41      	ldr	r2, [pc, #260]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7fd fed5 	bl	8000b38 <HAL_GetTick>
 8002d8e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fd fed1 	bl	8000b38 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b64      	cmp	r3, #100	; 0x64
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1d6      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8084 	beq.w	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d07c      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2300      	movs	r3, #0
 8002e20:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e22:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d04b      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fd fe81 	bl	8000b38 <HAL_GetTick>
 8002e36:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fd fe7d 	bl	8000b38 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e180      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e50:	2302      	movs	r3, #2
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	61fb      	str	r3, [r7, #28]
  return result;
 8002e68:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d108      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e7e:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	e00d      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	10908100 	.word	0x10908100
 8002e90:	2302      	movs	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	613a      	str	r2, [r7, #16]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	fa92 f2a2 	rbit	r2, r2
 8002eaa:	60fa      	str	r2, [r7, #12]
  return result;
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	fab2 f282 	clz	r2, r2
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f002 021f 	and.w	r2, r2, #31
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0b7      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eca:	4b95      	ldr	r3, [pc, #596]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4992      	ldr	r1, [pc, #584]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002edc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b8e      	ldr	r3, [pc, #568]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	4a8d      	ldr	r2, [pc, #564]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efc:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f023 0203 	bic.w	r2, r3, #3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4985      	ldr	r1, [pc, #532]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f1a:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	497e      	ldr	r1, [pc, #504]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f38:	4b79      	ldr	r3, [pc, #484]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	4976      	ldr	r1, [pc, #472]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f56:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f023 0210 	bic.w	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	496f      	ldr	r1, [pc, #444]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f74:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	4967      	ldr	r1, [pc, #412]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f92:	4b63      	ldr	r3, [pc, #396]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f023 0220 	bic.w	r2, r3, #32
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4960      	ldr	r1, [pc, #384]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	4958      	ldr	r1, [pc, #352]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	4951      	ldr	r1, [pc, #324]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	4949      	ldr	r1, [pc, #292]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4942      	ldr	r1, [pc, #264]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	493a      	ldr	r1, [pc, #232]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	4933      	ldr	r1, [pc, #204]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003064:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	492b      	ldr	r1, [pc, #172]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4924      	ldr	r1, [pc, #144]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	491c      	ldr	r1, [pc, #112]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	4915      	ldr	r1, [pc, #84]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030dc:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	490d      	ldr	r1, [pc, #52]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003106:	4906      	ldr	r1, [pc, #24]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003118:	4b01      	ldr	r3, [pc, #4]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	e002      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312c:	490b      	ldr	r1, [pc, #44]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800312e:	4313      	orrs	r3, r2
 8003130:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314a:	4904      	ldr	r1, [pc, #16]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800314c:	4313      	orrs	r3, r2
 800314e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3748      	adds	r7, #72	; 0x48
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000

08003160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e040      	b.n	80031f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fbd6 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8c0 	bl	8003324 <UART_SetConfig>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e022      	b.n	80031f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fa8a 	bl	80036d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fb11 	bl	8003814 <UART_CheckIdleState>
 80031f2:	4603      	mov	r3, r0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003210:	2b20      	cmp	r3, #32
 8003212:	f040 8082 	bne.w	800331a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_UART_Transmit+0x26>
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07a      	b.n	800331c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_UART_Transmit+0x38>
 8003230:	2302      	movs	r3, #2
 8003232:	e073      	b.n	800331c <HAL_UART_Transmit+0x120>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2221      	movs	r2, #33	; 0x21
 8003248:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324a:	f7fd fc75 	bl	8000b38 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d108      	bne.n	800327c <HAL_UART_Transmit+0x80>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e003      	b.n	8003284 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800328c:	e02d      	b.n	80032ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fb04 	bl	80038a6 <UART_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e039      	b.n	800331c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ba:	b292      	uxth	r2, r2
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	3302      	adds	r3, #2
 80032c2:	61bb      	str	r3, [r7, #24]
 80032c4:	e008      	b.n	80032d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	b292      	uxth	r2, r2
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1cb      	bne.n	800328e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fad0 	bl	80038a6 <UART_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e005      	b.n	800331c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4bab      	ldr	r3, [pc, #684]	; (80035fc <UART_SetConfig+0x2d8>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	6979      	ldr	r1, [r7, #20]
 8003358:	430b      	orrs	r3, r1
 800335a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a99      	ldr	r2, [pc, #612]	; (8003600 <UART_SetConfig+0x2dc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d120      	bne.n	80033e2 <UART_SetConfig+0xbe>
 80033a0:	4b98      	ldr	r3, [pc, #608]	; (8003604 <UART_SetConfig+0x2e0>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d817      	bhi.n	80033dc <UART_SetConfig+0xb8>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x90>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033d1 	.word	0x080033d1
 80033bc:	080033d7 	.word	0x080033d7
 80033c0:	080033cb 	.word	0x080033cb
 80033c4:	2301      	movs	r3, #1
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e0b5      	b.n	8003536 <UART_SetConfig+0x212>
 80033ca:	2302      	movs	r3, #2
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e0b2      	b.n	8003536 <UART_SetConfig+0x212>
 80033d0:	2304      	movs	r3, #4
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e0af      	b.n	8003536 <UART_SetConfig+0x212>
 80033d6:	2308      	movs	r3, #8
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e0ac      	b.n	8003536 <UART_SetConfig+0x212>
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e0a9      	b.n	8003536 <UART_SetConfig+0x212>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a88      	ldr	r2, [pc, #544]	; (8003608 <UART_SetConfig+0x2e4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d124      	bne.n	8003436 <UART_SetConfig+0x112>
 80033ec:	4b85      	ldr	r3, [pc, #532]	; (8003604 <UART_SetConfig+0x2e0>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033f8:	d011      	beq.n	800341e <UART_SetConfig+0xfa>
 80033fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033fe:	d817      	bhi.n	8003430 <UART_SetConfig+0x10c>
 8003400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003404:	d011      	beq.n	800342a <UART_SetConfig+0x106>
 8003406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800340a:	d811      	bhi.n	8003430 <UART_SetConfig+0x10c>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <UART_SetConfig+0xf4>
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x100>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x10c>
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e08b      	b.n	8003536 <UART_SetConfig+0x212>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e088      	b.n	8003536 <UART_SetConfig+0x212>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e085      	b.n	8003536 <UART_SetConfig+0x212>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e082      	b.n	8003536 <UART_SetConfig+0x212>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e07f      	b.n	8003536 <UART_SetConfig+0x212>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a74      	ldr	r2, [pc, #464]	; (800360c <UART_SetConfig+0x2e8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d124      	bne.n	800348a <UART_SetConfig+0x166>
 8003440:	4b70      	ldr	r3, [pc, #448]	; (8003604 <UART_SetConfig+0x2e0>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003448:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x14e>
 800344e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003452:	d817      	bhi.n	8003484 <UART_SetConfig+0x160>
 8003454:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003458:	d011      	beq.n	800347e <UART_SetConfig+0x15a>
 800345a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800345e:	d811      	bhi.n	8003484 <UART_SetConfig+0x160>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <UART_SetConfig+0x148>
 8003464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003468:	d006      	beq.n	8003478 <UART_SetConfig+0x154>
 800346a:	e00b      	b.n	8003484 <UART_SetConfig+0x160>
 800346c:	2300      	movs	r3, #0
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e061      	b.n	8003536 <UART_SetConfig+0x212>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e05e      	b.n	8003536 <UART_SetConfig+0x212>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e05b      	b.n	8003536 <UART_SetConfig+0x212>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e058      	b.n	8003536 <UART_SetConfig+0x212>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e055      	b.n	8003536 <UART_SetConfig+0x212>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a60      	ldr	r2, [pc, #384]	; (8003610 <UART_SetConfig+0x2ec>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d124      	bne.n	80034de <UART_SetConfig+0x1ba>
 8003494:	4b5b      	ldr	r3, [pc, #364]	; (8003604 <UART_SetConfig+0x2e0>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800349c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a0:	d011      	beq.n	80034c6 <UART_SetConfig+0x1a2>
 80034a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a6:	d817      	bhi.n	80034d8 <UART_SetConfig+0x1b4>
 80034a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ac:	d011      	beq.n	80034d2 <UART_SetConfig+0x1ae>
 80034ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b2:	d811      	bhi.n	80034d8 <UART_SetConfig+0x1b4>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <UART_SetConfig+0x19c>
 80034b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034bc:	d006      	beq.n	80034cc <UART_SetConfig+0x1a8>
 80034be:	e00b      	b.n	80034d8 <UART_SetConfig+0x1b4>
 80034c0:	2300      	movs	r3, #0
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e037      	b.n	8003536 <UART_SetConfig+0x212>
 80034c6:	2302      	movs	r3, #2
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e034      	b.n	8003536 <UART_SetConfig+0x212>
 80034cc:	2304      	movs	r3, #4
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e031      	b.n	8003536 <UART_SetConfig+0x212>
 80034d2:	2308      	movs	r3, #8
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	e02e      	b.n	8003536 <UART_SetConfig+0x212>
 80034d8:	2310      	movs	r3, #16
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e02b      	b.n	8003536 <UART_SetConfig+0x212>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a4c      	ldr	r2, [pc, #304]	; (8003614 <UART_SetConfig+0x2f0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d124      	bne.n	8003532 <UART_SetConfig+0x20e>
 80034e8:	4b46      	ldr	r3, [pc, #280]	; (8003604 <UART_SetConfig+0x2e0>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80034f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034f4:	d011      	beq.n	800351a <UART_SetConfig+0x1f6>
 80034f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034fa:	d817      	bhi.n	800352c <UART_SetConfig+0x208>
 80034fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003500:	d011      	beq.n	8003526 <UART_SetConfig+0x202>
 8003502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003506:	d811      	bhi.n	800352c <UART_SetConfig+0x208>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <UART_SetConfig+0x1f0>
 800350c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003510:	d006      	beq.n	8003520 <UART_SetConfig+0x1fc>
 8003512:	e00b      	b.n	800352c <UART_SetConfig+0x208>
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e00d      	b.n	8003536 <UART_SetConfig+0x212>
 800351a:	2302      	movs	r3, #2
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e00a      	b.n	8003536 <UART_SetConfig+0x212>
 8003520:	2304      	movs	r3, #4
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e007      	b.n	8003536 <UART_SetConfig+0x212>
 8003526:	2308      	movs	r3, #8
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e004      	b.n	8003536 <UART_SetConfig+0x212>
 800352c:	2310      	movs	r3, #16
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e001      	b.n	8003536 <UART_SetConfig+0x212>
 8003532:	2310      	movs	r3, #16
 8003534:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353e:	d16d      	bne.n	800361c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003540:	7ffb      	ldrb	r3, [r7, #31]
 8003542:	2b08      	cmp	r3, #8
 8003544:	d827      	bhi.n	8003596 <UART_SetConfig+0x272>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <UART_SetConfig+0x228>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003571 	.word	0x08003571
 8003550:	08003579 	.word	0x08003579
 8003554:	08003581 	.word	0x08003581
 8003558:	08003597 	.word	0x08003597
 800355c:	08003587 	.word	0x08003587
 8003560:	08003597 	.word	0x08003597
 8003564:	08003597 	.word	0x08003597
 8003568:	08003597 	.word	0x08003597
 800356c:	0800358f 	.word	0x0800358f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003570:	f7ff fb94 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003574:	61b8      	str	r0, [r7, #24]
        break;
 8003576:	e013      	b.n	80035a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003578:	f7ff fbb2 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 800357c:	61b8      	str	r0, [r7, #24]
        break;
 800357e:	e00f      	b.n	80035a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <UART_SetConfig+0x2f4>)
 8003582:	61bb      	str	r3, [r7, #24]
        break;
 8003584:	e00c      	b.n	80035a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003586:	f7ff fb13 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 800358a:	61b8      	str	r0, [r7, #24]
        break;
 800358c:	e008      	b.n	80035a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800358e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003592:	61bb      	str	r3, [r7, #24]
        break;
 8003594:	e004      	b.n	80035a0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	77bb      	strb	r3, [r7, #30]
        break;
 800359e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8086 	beq.w	80036b4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	005a      	lsls	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	b29b      	uxth	r3, r3
 80035be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	d916      	bls.n	80035f4 <UART_SetConfig+0x2d0>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d212      	bcs.n	80035f4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f023 030f 	bic.w	r3, r3, #15
 80035d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	89fb      	ldrh	r3, [r7, #14]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	89fa      	ldrh	r2, [r7, #14]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e05f      	b.n	80036b4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	77bb      	strb	r3, [r7, #30]
 80035f8:	e05c      	b.n	80036b4 <UART_SetConfig+0x390>
 80035fa:	bf00      	nop
 80035fc:	efff69f3 	.word	0xefff69f3
 8003600:	40013800 	.word	0x40013800
 8003604:	40021000 	.word	0x40021000
 8003608:	40004400 	.word	0x40004400
 800360c:	40004800 	.word	0x40004800
 8003610:	40004c00 	.word	0x40004c00
 8003614:	40005000 	.word	0x40005000
 8003618:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800361c:	7ffb      	ldrb	r3, [r7, #31]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d827      	bhi.n	8003672 <UART_SetConfig+0x34e>
 8003622:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x304>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	0800364d 	.word	0x0800364d
 800362c:	08003655 	.word	0x08003655
 8003630:	0800365d 	.word	0x0800365d
 8003634:	08003673 	.word	0x08003673
 8003638:	08003663 	.word	0x08003663
 800363c:	08003673 	.word	0x08003673
 8003640:	08003673 	.word	0x08003673
 8003644:	08003673 	.word	0x08003673
 8003648:	0800366b 	.word	0x0800366b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7ff fb26 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003650:	61b8      	str	r0, [r7, #24]
        break;
 8003652:	e013      	b.n	800367c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003654:	f7ff fb44 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8003658:	61b8      	str	r0, [r7, #24]
        break;
 800365a:	e00f      	b.n	800367c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <UART_SetConfig+0x3a8>)
 800365e:	61bb      	str	r3, [r7, #24]
        break;
 8003660:	e00c      	b.n	800367c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003662:	f7ff faa5 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8003666:	61b8      	str	r0, [r7, #24]
        break;
 8003668:	e008      	b.n	800367c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e004      	b.n	800367c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	77bb      	strb	r3, [r7, #30]
        break;
 800367a:	bf00      	nop
    }

    if (pclk != 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	085a      	lsrs	r2, r3, #1
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	441a      	add	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	b29b      	uxth	r3, r3
 8003696:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	d908      	bls.n	80036b0 <UART_SetConfig+0x38c>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a4:	d204      	bcs.n	80036b0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	e001      	b.n	80036b4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	007a1200 	.word	0x007a1200

080036d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ce:	d10a      	bne.n	80037e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003824:	f7fd f988 	bl	8000b38 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d10e      	bne.n	8003856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f82d 	bl	80038a6 <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e023      	b.n	800389e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d10e      	bne.n	8003882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f817 	bl	80038a6 <UART_WaitOnFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e00d      	b.n	800389e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b6:	e05e      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d05a      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c0:	f7fd f93a 	bl	8000b38 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d302      	bcc.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11b      	bne.n	800390e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e043      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d02c      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392a:	d124      	bne.n	8003976 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003934:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003944:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	429a      	cmp	r2, r3
 8003992:	d091      	beq.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <__libc_init_array>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	4d0d      	ldr	r5, [pc, #52]	; (80039d8 <__libc_init_array+0x38>)
 80039a4:	4c0d      	ldr	r4, [pc, #52]	; (80039dc <__libc_init_array+0x3c>)
 80039a6:	1b64      	subs	r4, r4, r5
 80039a8:	10a4      	asrs	r4, r4, #2
 80039aa:	2600      	movs	r6, #0
 80039ac:	42a6      	cmp	r6, r4
 80039ae:	d109      	bne.n	80039c4 <__libc_init_array+0x24>
 80039b0:	4d0b      	ldr	r5, [pc, #44]	; (80039e0 <__libc_init_array+0x40>)
 80039b2:	4c0c      	ldr	r4, [pc, #48]	; (80039e4 <__libc_init_array+0x44>)
 80039b4:	f000 f820 	bl	80039f8 <_init>
 80039b8:	1b64      	subs	r4, r4, r5
 80039ba:	10a4      	asrs	r4, r4, #2
 80039bc:	2600      	movs	r6, #0
 80039be:	42a6      	cmp	r6, r4
 80039c0:	d105      	bne.n	80039ce <__libc_init_array+0x2e>
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c8:	4798      	blx	r3
 80039ca:	3601      	adds	r6, #1
 80039cc:	e7ee      	b.n	80039ac <__libc_init_array+0xc>
 80039ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d2:	4798      	blx	r3
 80039d4:	3601      	adds	r6, #1
 80039d6:	e7f2      	b.n	80039be <__libc_init_array+0x1e>
 80039d8:	08003a9c 	.word	0x08003a9c
 80039dc:	08003a9c 	.word	0x08003a9c
 80039e0:	08003a9c 	.word	0x08003a9c
 80039e4:	08003aa0 	.word	0x08003aa0

080039e8 <memset>:
 80039e8:	4402      	add	r2, r0
 80039ea:	4603      	mov	r3, r0
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d100      	bne.n	80039f2 <memset+0xa>
 80039f0:	4770      	bx	lr
 80039f2:	f803 1b01 	strb.w	r1, [r3], #1
 80039f6:	e7f9      	b.n	80039ec <memset+0x4>

080039f8 <_init>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	bf00      	nop
 80039fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fe:	bc08      	pop	{r3}
 8003a00:	469e      	mov	lr, r3
 8003a02:	4770      	bx	lr

08003a04 <_fini>:
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	bf00      	nop
 8003a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0a:	bc08      	pop	{r3}
 8003a0c:	469e      	mov	lr, r3
 8003a0e:	4770      	bx	lr
